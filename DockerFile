# use a node image as the base image and name it 'build' for
# later reference
FROM node:18.18-alpine3.18 as build

# set the working directory to /app
WORKDIR /app
# copy the current directory contents into the container at /app
COPY . .
# install dependencies, matching package-lock.json
RUN npm ci
# build the app
RUN npm run build


# Use the latest version of the official Nginx image as the base image
FROM nginx:alpine3.18
# copy the custom nginx configuration file to the container in the default
# location
COPY .nginx/nginx.conf /etc/nginx/nginx.conf
# copy the built application from the build stage to the nginx html
# directory
RUN apk update && apk upgrade && \
    apk --update add logrotate openssl bash && \
    apk add --no-cache certbot certbot-nginx

# Remove a configuração padrão do NGINX
RUN rm -rf /etc/nginx/conf.d/default.conf

# add user www-data
RUN adduser -D -H -u 1000 -s /bin/bash www-data -G www-data

COPY --from=build /app/dist/base-app /usr/share/nginx/html

# Cria diretórios para as configurações do NGINX
RUN mkdir -p /etc/nginx/sites-available /etc/nginx/conf.d && \
    chown -R www-data:www-data /etc/nginx/sites-available /etc/nginx/conf.d

# Define o diretório de trabalho para o NGINX
WORKDIR /etc/nginx

# Limpeza: Remove pacotes não utilizados para reduzir o tamanho da imagem
RUN apk del --no-cache

# Inicia o NGINX quando o contêiner é executado
CMD ["nginx", "-g", "daemon off;"]

# The above commands build the Angular app and then configure and build a
# Docker image for serving it using the nginx web server.
